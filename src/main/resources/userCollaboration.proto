syntax = "proto3";// specifies the kind of syntax, I am using the version 3 of protocol buffers.

option java_package = "grpc.newServices";// specifies the java package it can be modified.
option java_multiple_files = true;// specifies the way the files are organised by the library, it is fixed.
option java_outer_classname = "userCollaborationImpl";// specifies the Class Name, I enter the service name + IMPL, which means implementation. It can be modified.

//Creating a GRPC service which is called userCollaboration

service userCollaboration{

	//indicating the method with the term rpc, the method and type of message that is sending and receiving

	rpc   enterLocation(chooseCity) returns (stream displayLocationDetails){} //Server Streaming
    rpc   addingDetails(stream addInfo) returns (responseAddInfo){} //Client Streaming
    rpc   displayRecorded(selectViewInfo) returns (stream responseDataRecorded){} //Server Streaming

}

 ////Server Streaming - specify what my message is called, which type its contains and assigning its values.

 message chooseCity{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string firstString = 1;
 	int32 myInt = 2;
 	bool myBool = 3;

 }

 //Server Streaming - specify what my message return is called, which type its contains and assigning its values.

 message displayLocationDetails{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string firstString = 1;
 	int32 myInt = 2;
 	bool myBool = 3;

 }

  ////Client Streaming - specify what my message is called, which type its contains and assigning its values.

 message addInfo{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string firstString = 1;
 	int32 myInt = 2;
 	bool myBool = 3;

 }

  //Client Streaming - specify what my message return is called, which type its contains and assigning its values.

 message responseAddInfo{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string firstString = 1;
 	int32 myInt = 2;
 	bool myBool = 3;

 }


 //Server streaming - specify what my message return is called, which type its contains and assigning its values.

 message selectViewInfo{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string firstString = 1;
 	int32 myInt = 2;
 	bool myBool = 3;

 }
  //Server streaming - specify what my message return is called, which type its contains and assigning its values.

 message responseDataRecorded{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string firstString = 1;
 	int32 myInt = 2;
 	bool myBool = 3;

 }
