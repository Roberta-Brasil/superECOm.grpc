syntax = "proto3";// specifies the kind of syntax, I am using the version 3 of protocol buffers.

option java_package = "ds.Service3";// specifies the java package it can be modified.
option java_multiple_files = true;// specifies the way the files are organised by the library, it is fixed.
option java_outer_classname = "Service3Impl";// specifies the Class Name, I enter the service name + IMPL, which means implementation. It can be modified.

//Creating a GRPC service which is called userCollaboration

service service3{

	//indicating the method with the term rpc, the method and type of message that is sending and receiving

	rpc   enterLocation(enterCity) returns (stream displayLocationDetails){} //Server Streaming
    rpc   addingDetails(stream addInfo) returns (stream responseAddInfo){} //Bidirectional Streaming
    rpc   displayRecorded(selectViewInfo) returns (stream responseDataRecorded){} //Server Streaming

}

 ////Server Streaming - specify what my message is called, which type its contains and assigning its values.

 message enterCity{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string cityAdded = 1;

 }

 //Server Streaming - specify what my message return is called, which type its contains and assigning its values.

 message displayLocationDetails{

 //it is the type that are in our message and has to convert the message into a series of bites

    string cityAdded = 1;
 	string cityDetails = 2;
 	bool locationConfirmation = 3;

 }

  //Bidirectional Streaming - specify what my message is called, which type its contains and assigning its values.

 message addInfo{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string naturalResourceId = 1;
    string wind = 2;
    string temperature = 3;
    string typeOfnaturalDisaster = 4;
    string typeOfPollutan = 5;
 }

  //Bidirectional Streaming - specify what my message return is called, which type its contains and assigning its values.

 message responseAddInfo{

 //it is the type that are in our message and has to convert the message into a series of bites


 	string resourcesMessageConfirmation = 1;
 	string lastAddedMsg = 2;
 	string naturalResourceLastAdded = 3;


 }


 //Server streaming - specify what my message return is called, which type its contains and assigning its values.

 message selectViewInfo{

 //it is the type that are in our message and has to convert the message into a series of bites

 	string viewInfoRegistered = 1;

 }
  //Server streaming - specify what my message return is called, which type its contains and assigning its values.

 message responseDataRecorded{

 //it is the type that are in our message and has to convert the message into a series of bites

        string displayDataRecorded = 1;
 	 	string cityDetails = 2;
 	 	string naturalResourceLastAdded = 3;

 }
